<!DOCTYPE HTML>
<html>
<head>
   <title>fifo_read</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="fifo_read" />
   <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="styles.css" rel="stylesheet" />

   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>


</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#158AFF">
  <tr valign="middle">
    <td align="left">
      <h1 class="p_Heading1"><span class="f_Heading1">fifo_read</span></h1>

    </td>
    <td align="right" valign="bottom">
     <span style="font-size: 9pt">
     <a href="einfuhrung.htm"><img src="top_btn.png" border=0 alt="Anfang"></a>&nbsp;
     <a href="fifo_init.htm"><img src="prev_btn.png" border=0 alt="Zurück"></a>&nbsp;
     <a href="fifo_used.htm"><img src="next_btn.png" border=0 alt="Weiter"></a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p class="p_Caption"><span class="f_Caption">RTC Function</span></p>
<p>Reads a string from a FIFO storage.</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 10px 0px;"><table cellspacing="0" cellpadding="0" border="0" style="border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:145px; padding:0px;"><p style="margin: 10px 0px 10px 0px;"><span style="font-weight: bold;">Declaration:</span></p>
</td>
<td colspan="2" style="vertical-align:top; padding:0px;"><p style="margin: 10px 0px 10px 0px;">bool <span style="font-weight: bold;">fifo_read</span> (int no, string *dest, int *len)</p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:145px; padding:0px;"><p style="margin: 10px 0px 10px 0px;"><span style="font-weight: bold;">Group:</span></p>
</td>
<td colspan="2" style="vertical-align:top; padding:0px;"><p style="margin: 10px 0px 10px 0px;">FIFO Storage</p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:145px; padding:0px;"><p style="margin: 10px 0px 10px 0px;"><span style="font-weight: bold;">Parameters:</span></p>
</td>
<td style="vertical-align:top; width:75px; padding:0px;"><p style="margin: 10px 0px 10px 0px;">no &nbsp; &nbsp; &nbsp;  <br>
dest<br>
len</p>
</td>
<td style="vertical-align:top; width:494px; padding:0px;"><p style="margin: 10px 0px 10px 0px;">Logical reference number<br>
String variable for characters read<br>
Variable for length of the string read</p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:145px; padding:0px;"><p style="margin: 10px 0px 10px 0px;"><span style="font-weight: bold;">Return value:</span></p>
</td>
<td colspan="2" style="vertical-align:top; padding:0px;"><p style="margin: 10px 0px 10px 0px;">Function result</p>
</td>
</tr>
</table>
</div>
<p>&nbsp;</p>
<p>The function <span style="font-style: italic; color: #008000;">fifo_read</span><span style="font-style: italic;"> </span>reads a string from the FIFO storage specified by the logical reference number <span style="font-style: italic;">no</span>. Beforehand the FIFO storage must be initialized by the instruction <a href="fifo_init.htm" class="topiclink">fifo_init</a> and written using the function <a href="fifo_write.htm" class="topiclink">fifo_write</a>. If a string can be read successfully, it is written into the provided variable <span style="font-style: italic;">dest</span>. In that case, <span style="font-style: italic; color: #008000;">fifo_read</span> returns <span style="font-style: italic;">true</span> as function result. The provided integer variable <span style="font-style: italic;">len</span> then contains the number of read characters. In case of an error, <span style="font-style: italic; color: #008000;">fifo_read</span> returns <span style="font-style: italic;">false</span>. After execution of <span style="font-style: italic; color: #008000;">fifo_read</span>, the internal read pointer is moved behind the last read character. A string once read from the FIFO storage cannot be accessed a second time.</p>
<p>&nbsp;</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 10px 0px;"><table cellspacing="0" cellpadding="0" border="0" style="border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:145px; padding:0px;"><p><span style="font-weight: bold;">Example:</span></p>
</td>
<td style="vertical-align:top; padding:0px;"><p class="p_CodeExample"><span class="f_CodeExample" style="font-style: italic; color: #ff0000;">/*&nbsp;Background&nbsp;data&nbsp;transmission&nbsp;*/</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="font-weight: bold;">void</span><span class="f_CodeExample">&nbsp;HostTask(</span><span class="f_CodeExample" style="font-weight: bold;">void</span><span class="f_CodeExample">)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="font-weight: bold;">int</span><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;len;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="font-weight: bold;">string</span><span class="f_CodeExample">&nbsp;buf[200];</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold;">for</span><span class="f_CodeExample">(;;)</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;</span><span class="f_CodeExample">(</span><span class="f_CodeExample" style="font-weight: bold;">fifo_read</span><span class="f_CodeExample">(0,&nbsp;buf,&nbsp;len))&nbsp;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold;">while</span><span class="f_CodeExample">&nbsp;(</span><span class="f_CodeExample" style="font-weight: bold;">writestring</span><span class="f_CodeExample">(HostPort,&nbsp;buf)&nbsp;&gt;&nbsp;0)&nbsp;</span><span class="f_CodeExample" style="font-weight: bold;">delay</span><span class="f_CodeExample">(1);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample" style="font-weight: bold;">else</span></p>
<p class="p_CodeExample"><span class="f_CodeExample" style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delay</span><span class="f_CodeExample">(0.5);</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
</td>
</tr>
</table>
</div>
<p>&nbsp;</p>

</td></tr></table>

</body>
</html>
